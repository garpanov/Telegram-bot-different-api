from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.middleware import FSMContext

from inline_board import return_board_inline
from services.temperature.utils import fetch

class StateForm(StatesGroup):
	city = State()

rout_temp = Router()

@rout_temp.callback_query(F.data == 'temperature')
async def cmd_temperature(callback: CallbackQuery, state: FSMContext):
	await callback.message.delete()
	await state.set_state(StateForm.city)

	await callback.message.answer("–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ–π"
	                              "(–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Kyiv' –≤–º–µ—Å—Ç–æ '–ö–∏–µ–≤')üëá")

@rout_temp.message(StateForm.city)
async def cmd_search_city(message: Message, state: FSMContext):
	city_name = message.text
	data = await fetch(city_name)
	if 'error' in data:
		if data['error'] == 'Not Found':
			await message.answer("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∞—Ç–∏–Ω–∏—Ü–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Kyiv' –≤–º–µ—Å—Ç–æ '–ö–∏–µ–≤'). üëá")
		else:
			await message.answer('–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç —Å–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≥–æ—Ä–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
			                     reply_markup=return_board_inline)
			await state.clear()
		return

	temperature = data['temperature']
	if temperature < 15:
		await message.answer(f'–°–µ–≥–æ–¥–Ω—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temperature} –≥—Ä–∞–¥—É—Å–æ–≤, —Ö–æ–ª–æ–¥–Ω–æ, –æ–¥–µ–Ω—å –∫—É—Ä—Ç–∫—É.',
		                     reply_markup=return_board_inline)
	else:
		await message.answer(f'–°–µ–≥–æ–¥–Ω—è {temperature} –≥—Ä–∞–¥—É—Å–æ–≤, –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å, –º–æ–∂–Ω–æ –±–µ–≥–∞—Ç—å –≤ —Ñ—É—Ç–±–æ–ª–∫–µ.',
		                     reply_markup=return_board_inline)
	await state.clear()



